name: Template for Restart Application Using ArgoCD

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image-tag:
        required: true
        type: string
    secrets:
      ARGOCD_USERNAME:
        required: true
      ARGOCD_PASSWORD:
        required: true

jobs:
  deploy:
    name: Deploy to Dev via ArgoCD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/

      - name: ArgoCD Login
        env:
          ARGOCD_SERVER: ${{ env.ARGOCD_SERVER }}
        run: |
          argocd login $ARGOCD_SERVER \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE

      - name: Apply ConfigMap
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: frontend-config
            namespace: $NAMESPACE
          data:
            NEXT_PUBLIC_API_URL: "$FRONTEND_DOMAIN"
            NEXT_PUBLIC_ENV: "development"
            NEXT_PUBLIC_FEATURE_FLAG: "true"
          EOF

      - name: Update Deployment Image
        run: |
          DEPLOYMENT_FILE="k8s/dev/deployment.yaml"
          IMAGE="$ACR_NAME.azurecr.io/$FRONTEND_IMAGE:${{ inputs.image-tag }}"
          sed -i "s|image: .*|image: ${IMAGE}|g" $DEPLOYMENT_FILE
          kubectl apply -f $DEPLOYMENT_FILE -n $NAMESPACE

      - name: Sync ArgoCD Application
        run: |
          argocd app sync $ARGOCD_APP
          argocd app wait $ARGOCD_APP --timeout 120
