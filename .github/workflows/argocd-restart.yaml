name: Deploy Frontend via ArgoCD

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      image-tag:
        required: true
        type: string
    secrets:
      ARGOCD_SERVER:
        required: true
      ARGOCD_USERNAME:
        required: true
      ARGOCD_PASSWORD:
        required: true
      KUBECONFIG:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Step 3: Install ArgoCD CLI
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      # Step 4: Login to ArgoCD
      - name: ArgoCD Login
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        run: |
          argocd login $ARGOCD_SERVER \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --insecure

      # Step 5: Ensure namespace exists
      - name: Ensure Kubernetes namespace
        run: |
          NAMESPACE="${{ inputs.environment }}"
          kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE

      # Step 6: Update Deployment YAML with new image
      - name: Update Deployment Image
        run: |
          DEPLOYMENT_FILE="k8s/${{ inputs.environment }}/deployment.yaml"
          IMAGE="$ACR_NAME.azurecr.io/$FRONTEND_IMAGE:${{ inputs['image-tag'] }}"
          echo "Updating image in $DEPLOYMENT_FILE -> $IMAGE"
          sed -i "s|image: .*|image: ${IMAGE}|g" $DEPLOYMENT_FILE
          kubectl apply -f $DEPLOYMENT_FILE -n ${{ inputs.environment }}

      # Step 7: Sync ArgoCD Application
      - name: Sync ArgoCD Application
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        run: |
          ARGOCD_APP="frontend-${{ inputs.environment }}"
          argocd app sync $ARGOCD_APP
          argocd app wait $ARGOCD_APP --timeout 180
